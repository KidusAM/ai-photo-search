Description: CI/CD For AI image search app

Parameters:
  GitHubRepo:
    Type: String
    Default: ai-photo-search

  GitHubBranch:
    Type: String
    Default: master

  GitHubUser:
    Type: String
    Default: KidusAM

  GitHubToken:
    Type: String
    Default: put_github_token_here 

  SearchLambdaName:
    Type: String
    Default: search-images-cloudformation

  IndexLambdaName:
    Type: String
    Default: index-images-cloudformation

Resources:

  AssetsBucket:
    Type: AWS::S3::Bucket

  PhotosBucket:
    Type: AWS::S3::Bucket

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FrontendBucket
                - /*
      Bucket: !Ref FrontendBucket

  LambdasRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement" : [{
            "Effect": "Allow",
            "Principal": { "Service": [ "lambda.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: lambdas-execution-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:*
                  - rekognition:*
                  - es:*
                  - lex:*
  SearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: placeholder
      FunctionName: !Ref SearchLambdaName
      Layers:
        - arn:aws:lambda:us-east-1:308030062589:layer:dependencies:2
      Role: !GetAtt LambdasRole.Arn
      Runtime: python3.7
      Handler: search_photos.lambda_handler
      Timeout: 15

  IndexLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: placeholder
      FunctionName: !Ref IndexLambdaName
      Layers:
        - arn:aws:lambda:us-east-1:308030062589:layer:dependencies:2
      Role: !GetAtt LambdasRole.Arn
      Runtime: python3.7
      Handler: index_photos.lambda_handler
      Timeout: 15

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement" : [{
            "Effect": "Allow",
            "Principal": { "Service": [ "codebuild.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: build-and-deploy-code
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                - !Sub arn:aws:s3:::${AssetsBucket}/*
                - !Sub arn:aws:s3:::${FrontendBucket}/*
                - !Sub arn:aws:s3:::${PhotosBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetObjectVersioning
              - Resource: '*'
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
                  - lambda:*

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "codepipeline.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: codepipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${AssetsBucket}/*
                  - !Sub arn:aws:s3:::${FrontendBucket}/*
                  - !Sub arn:aws:s3:::${PhotosBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*

  BuildAndPushProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: buildspec-lambdas.yml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
      Name: !Sub ${AWS::StackName}-build-app
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Src
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Src
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: AppBuildAndPush
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildAndPushProject
              InputArtifacts:
                - Name: Src
              OutputArtifacts:
                - Name: AppBuildAndPushOutput
              RunOrder: 1

  # DeployFrontendProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Artifacts

Outputs:
  WebsiteURL:
    Value: !GetAtt FrontendBucket.WebsiteURL
    Description: URL for frontend
